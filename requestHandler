#include <iostream>
#include <string>

#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <fcntl.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/stat.h>
#include <pthread.h>

#include "handleRequest.h"
#include "authentication.h"
#include "FilesDisplay.h"
#include "share.h"
#include "Upload.h"
extern pthread_mutex_t mymutex;
static int good_requests,bad_requests;
static long total_download;

using namespace std;

void handle_request(int socketfd)
{

	int j, file_fd, buflen,temp_len;
	long i, ret, len;
	const char * fstr;
	static char buffer[BUFSIZE+1],temp_buffer[BUFSIZE+1]; /* static so zero filled */
	struct stat stat_buf;

	ret =read(socketfd,buffer,BUFSIZE); 	/* read Web request in one go */


	//cout<<buffer<<endl;
	string extension = "cpp";
	bzero(temp_buffer,sizeof(temp_buffer));
	strcpy(temp_buffer,buffer);
	temp_len = strlen(temp_buffer);
//Service for Upload
	if( !strncmp(&temp_buffer[6],"Upload", 6)) {
			cout<<"Upload Called"<<endl;
			
			Upload(socketfd,buffer,ret);
			pthread_exit(NULL);
				}

	if(ret > 0 && ret < BUFSIZE)	/* return code is valid chars */
	buffer[ret]=0;		/* terminate the buffer */
	else buffer[0]=0;
	for(i=0;i<ret;i++)	/* remove CF and LF characters */
		if(buffer[i] == '\r' || buffer[i] == '\n')
			buffer[i]='*';

	if( strncmp(buffer,"GET ",4) && strncmp(buffer,"get ",4) ) {
	printf("Only simple GET operation supported:%s",buffer);
	}

	for(i=4;i<BUFSIZE;i++) { /* null terminate after the second space to ignore extra stuff */
	if(buffer[i] == ' ') { /* string is "GET URL " +lots of other stuff */
		buffer[i] = 0;
		break;
	}
	}

	//Extensions supported by the WebServer
	if( !strncmp(&buffer[0],"GET /\0",6) || !strncmp(&buffer[0],"get /\0",6) ) /* convert no filename to index file */
	{
	(void)strcpy(buffer,"GET /Login.html");
	pthread_mutex_lock(&mymutex);
	good_requests += 1;
	pthread_mutex_unlock(&mymutex);
	}
	buflen=strlen(buffer);
	fstr = (char *)0;

	extension = "php";
	//printf("%s",buffer);
	len = strlen(extension.c_str());
	if( !strncmp(&buffer[buflen-len], extension.c_str(), len)) {
			fstr = "text/php";
			//break;
	}


	extension = "html";
	//printf("%s",buffer);
	len = strlen(extension.c_str());
	if( !strncmp(&buffer[buflen-len], extension.c_str(), len)) {
		fstr = "text/html";
		//break;
	}

	extension = "jpg";
	len = strlen(extension.c_str());
	if( !strncmp(&buffer[buflen-len], extension.c_str(), len)) {
		fstr = "image/jpeg";
		//break;
	}


	extension = "gif";
	len = strlen(extension.c_str());
	if( !strncmp(&buffer[buflen-len], extension.c_str(), len)) {
		fstr = "image/gif";
	}


	extension = "css";
	len = strlen(extension.c_str());
	if( !strncmp(&buffer[buflen-len], extension.c_str(), len)) {
		fstr = "text/css";
	}

	extension = "woff";
	len = strlen(extension.c_str());
	if( !strncmp(&buffer[buflen-len], extension.c_str(), len)) {
		fstr = "font/woff";
	}
	extension = "pdf";
	len = strlen(extension.c_str());
	if( !strncmp(&buffer[buflen-len], extension.c_str(), len)) {
		fstr = "application/pdf";
	}
	extension = "txt";
	//printf("%s",buffer);
	len = strlen(extension.c_str());
	if( !strncmp(&buffer[buflen-len], extension.c_str(), len)) {
		fstr = "text/plain";
		//break;
	}
	extension = "ico";
	//printf("%s",buffer);
	len = strlen(extension.c_str());
	if( !strncmp(&buffer[buflen-len], extension.c_str(), len)) {
		fstr = "image/x-icon";
		//break;
	}
/*Code for Calling server programs */
	extension = "cpp";
	//char temp_buffer[strlen(buffer)];
	bzero(temp_buffer,sizeof(temp_buffer));
	strcpy(temp_buffer,buffer);
	for(i=4;i<BUFSIZE;i++) { /* null terminate after the second space to ignore extra stuff */
	if(temp_buffer[i] == '?') { /* string is "GET URL " +lots of other stuff */
		temp_buffer[i] = 0;
		break;
	}
	}

	len = strlen(extension.c_str());
	temp_len = strlen(temp_buffer);
	if( !strncmp(&temp_buffer[temp_len-len], extension.c_str(), len)) {
        
//Service for Authenticate		
		if( !strncmp(&temp_buffer[5],"authentication", 14))
		{		
			authenticate(socketfd,buffer);
			cout<<"Its here server"<<endl;
			pthread_exit(NULL);
		}
//Service for Dynamic Display File name html to share	 
		else if( !strncmp(&temp_buffer[5],"FilesDisplay", 12))
	   	{
			cout<<"FILE DISPLAY server"<<endl;
			FilesDisplay(socketfd,buffer);
			cout<<"FILE DISPLAY END server"<<endl;
			pthread_exit(NULL);
	   	}
//Service to share the file to other users
		else if( !strncmp(&temp_buffer[5],"share", 5))
	   	{
			cout<<"SHAREEE"<<endl;
			share(socketfd,buffer);
			//cout<<"SHARE ENDDD"<<endl;
			pthread_exit(NULL);
	   	}	

}

	if(fstr == 0){
	pthread_mutex_lock(&mymutex);
	bad_requests += 1;
	pthread_mutex_unlock(&mymutex);
	printf("file extension type not supported:%s",buffer);
	len = 25;
		(void)sprintf(buffer,"HTTP/1.1 204 No Content\nServer: 207httpd/%d.0\nContent-Length: %ld\nConnection: close\nContent-Type: %s\n\n", VERSION,len, fstr);
	pthread_exit(NULL);
	}

	if(( file_fd = open(&buffer[5],O_RDONLY)) == -1)
	{
	printf("error opening the file\n");
	fflush(stdout);
	pthread_exit(NULL);
	}
	else
	{
	int rc = fstat(file_fd, &stat_buf);
	if (rc < 0)printf("error opening the file\n");
	fflush(stdout);
	pthread_mutex_lock(&mymutex);
	total_download += stat_buf.st_size;
	pthread_mutex_unlock(&mymutex);
	}

	len = (long)lseek(file_fd, (off_t)0, SEEK_END);
 	(void)lseek(file_fd, (off_t)0, SEEK_SET);
  	(void)sprintf(buffer,"HTTP/1.1 200 OK\nServer: 207httpd/%d.0\nContent-Length: %ld\nConnection: close\nContent-Type: %s\n\n", VERSION,len, fstr);

	(void)write(socketfd,buffer,strlen(buffer));

	while (	(ret = read(file_fd, buffer, BUFSIZE)) > 0 ) {
	(void)write(socketfd,buffer,ret);

	}
	sleep(1);
	close(socketfd);
	pthread_exit(NULL);
}

