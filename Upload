/*
 * Upload.cpp
 *
 *  Created on: Dec 1, 2014
 *      Author: mahendra
 */


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <fcntl.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <iostream>
#include <sys/stat.h>
#include <pthread.h>
#include <sqlite3.h>
#include <stdbool.h>
//#include <php.h>

#define BUFSIZE 946494
#define VERSION 23
extern pthread_mutex_t mymutex;

using namespace std;

static int callback(void *data, int argc, char **argv, char **azColName);
string quotesql( const string s );


 void Upload(int sockfd,char* buffer, int len)
 {
	int i,ret;
	int file_fd;
	static char file_name;//
	string name;
	string filename;
	
	FILE *fd;
	char* ptr;
	int current_addr;
	char *zErrMsg = 0;
   	int rc;
   	char *sql;	
	const char* data = "Callback function called";
	bool insert;
	
	ret = len;
	ptr = strstr(buffer,"filename");

	ptr = strstr(buffer,"filename");
		if(ptr != NULL)
		{
				for(i=10;;i++)
				{
					if(ptr[i] == '"')break;
					filename = filename + ptr[i];
				}

		ptr = strstr(ptr,"Content-Type");
		ptr = strstr(ptr,"\n");

		current_addr = ptr - buffer;

		ret = ret - current_addr;

		FILE *fd;

		fd = fopen(filename.c_str(),"wb+");

		fwrite(ptr,1,ret,fd);

		fclose(fd);
	}
	

	
	



	// Database insert operation
	string sqlinsert;
	sqlite3 *db;
	   

	rc = sqlite3_open("207DB.db", &db);
	 if( rc ){
      		fprintf(stderr, "Can't open database: %s\n", sqlite3_errmsg(db));
     		 exit(0);
	   	}else{
	      	fprintf(stderr, "Opened database successfully\n");
		   }

	string username ;
	string fileid = "1";
	string filepath = "/home/mahendra/207/FileSharingServer/BIN";
	string sharedwithusr = "B";

	

	// Serach for username
	
		ptr = strstr(buffer,"login");
		if(ptr != NULL)
		{
				for(i=6;;i++)
				{
					if(ptr[i] == '&')break;
					username = username + ptr[i];
				}
		}
	
	cout<<username<<endl;

		if(true)
	{
		string nametest = "'mahendra'";
		sqlinsert=
		    "INSERT INTO Files  (UserID, filename) VALUES ("+ quotesql(username) + ","+ quotesql(filename) + ");";
			//quotesql(username)

	//printf("insert stat %s\n",sqlinsert);
	pthread_mutex_lock(&mymutex);
	rc = sqlite3_exec(db, sqlinsert.c_str(), callback, (void*)data, &zErrMsg);
	pthread_mutex_unlock(&mymutex);
	   if( rc != SQLITE_OK ){
	      fprintf(stderr, "SQL error: %s\n", zErrMsg);
	      sqlite3_free(zErrMsg);
	   }else{
	      fprintf(stdout, "inserted done successfully\n");
	   }
	}



	rc = sqlite3_close(db);





		strcpy(&file_name, "Display.html");

		if((file_fd = open("Display.html",O_RDONLY)) < 0)
				{
			printf("error opening the file\n");
				fflush(stdout);
				pthread_exit(NULL);
				}
		else
				{

				long i, ret, len;
				const char * fstr = "text/html";
				//static char buffer[BUFSIZE+1],temp_buffer[BUFSIZE+1]; /* static so zero filled */
				struct stat stat_buf;

				len = (long)lseek(file_fd, (off_t)0, SEEK_END);
			 	(void)lseek(file_fd, (off_t)0, SEEK_SET);
				bzero(buffer,sizeof(buffer));
		          	(void)sprintf(buffer,"HTTP/1.1 200 OK\nServer: 207httpd/%d.0\nContent-Length: %ld\nConnection: close\nContent-Type: %s\n\n", VERSION,len, fstr);

				(void)write(sockfd,buffer,strlen(buffer));

				while (	(ret = read(file_fd, buffer, BUFSIZE)) > 0 ) {
				(void)write(sockfd,buffer,ret);

				}
				sleep(1);
				close(sockfd);


				}





}

static int callback(void *data, int argc, char **argv, char **azColName){
   int i;
   //fprintf(stderr, "%s: ", (const char*)data);
   for(i=0; i<argc; i++){
      //printf("%s = %s\n", azColName[i], argv[i] ? argv[i] : "NULL");
   }
   printf("\n");
   return 0;
}

string quotesql( const string s ) {
    return string("'") + s + string("'");
}

