#include <sstream>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <fcntl.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <iostream>
#include <string>
#include <sys/stat.h>
#include <pthread.h>

#include "sqlite3.h"
#include "authentication.h"
#include "handleRequest.h"
extern pthread_mutex_t mymutex;
using namespace std;

int execDb(string user,string password);
static int callback(void *data, int argc, char **argv, char **azColName);

void authenticate(int sockfd, char* buffer)
{
	int i;
	string user,password,str = buffer;
	char* pch;

	long ret, len;
	const char * fstr = "text/html";
	
	int file_fd;
	struct stat stat_buf;




/*      Get User name from http request */
	pch = strstr(buffer,"login");
	for(i=6;i<20;i++ )
	{

		if(pch[i] == '&')
			break;
			user = user + pch[i];
	}

/*      Get Password from http request */
	pch = strstr(buffer,"password");
	for(i=9;i<20;i++ )
	{

		if(pch[i] == '&')
			break;
			password = password + pch[i];
	}




/*      Check from DB */
	int result=execDb(user,password);
	if(result>0)
	{
	
		if((file_fd = open("Login.html",O_RDONLY)) < 0)
		{
			printf("error opening the file\n");
			fflush(stdout);
			pthread_exit(NULL);
		}
		else
		{

			len = (long)lseek(file_fd, (off_t)0, SEEK_END);
		 	(void)lseek(file_fd, (off_t)0, SEEK_SET);
	          	(void)sprintf(buffer,"HTTP/1.1 200 OK\nServer: 207httpd/%d.0\nContent-Length: %ld\nConnection: close\nContent-Type: %s\n\n", VERSION,len, fstr);

			(void)write(sockfd,buffer,strlen(buffer));

			while (	(ret = read(file_fd, buffer, BUFSIZE)) > 0 )
 			{
			(void)write(sockfd,buffer,ret);

	
			}
		}

	}
/*      Send http response */

	if((file_fd = open(DISPLAYHT,O_RDONLY)) < 0)
	{
		printf("error opening the file\n");
		fflush(stdout);
		pthread_exit(NULL);
	}

	else
	{
		

		len = (long)lseek(file_fd, (off_t)0, SEEK_END);
	 	(void)lseek(file_fd, (off_t)0, SEEK_SET);
          	(void)sprintf(buffer,"HTTP/1.1 200 OK\nServer: 207httpd/%d.0\nContent-Length: %ld\nConnection: close\nContent-Type: %s\n\n", VERSION,len, fstr);

		(void)write(sockfd,buffer,strlen(buffer));

		while (	(ret = read(file_fd, buffer, BUFSIZE)) > 0 ) {
		(void)write(sockfd,buffer,ret);

		}
		sleep(1);
		close(sockfd);
	}

}

int execDb(string user,string password)
{
	sqlite3 *db;
	char *zErrMsg = 0;
	int rc;
	string sql;
	const char* data = "Callback function called";
	rc = sqlite3_open("207DB.db", &db);
	
	if( rc )
	{
	   fprintf(stderr, "Can't open database: %s\n", sqlite3_errmsg(db));
	   exit(0);
	}
	else
	{

	   fprintf(stderr, "Opened database successfully\n");
	}
	//sqlite3_close(db);
	sql="Select * from Users where UserID like "+string("'")+user+string("'")+" and password like "+string("'")+password+string("'");
	printf("%s\n",sql.c_str());
	/* Execute SQL statement */
	pthread_mutex_lock(&mymutex);
	rc = sqlite3_exec(db, sql.c_str(), callback, (void*)data, &zErrMsg);
	pthread_mutex_unlock(&mymutex);
	cout<<rc<<endl;
	if( rc != SQLITE_OK )
	{
	   fprintf(stderr, "Login Failed: %s\n", zErrMsg);
	   sqlite3_free(zErrMsg);
		return 4;
	}
	else
	{
	   fprintf(stdout, "login done successfully\n");
		return 0;
	}

}

static int callback(void *data, int argc, char **argv, char **azColName)
{
	int i;
	//fprintf(stderr, "%s: ", (const char*)data);
	for(i=0; i<argc; i++)
	{
	   //printf("%s = %s\n", azColName[i], argv[i] ? argv[i] : "NULL");
	}
	printf("\n");
	return 0;
}
