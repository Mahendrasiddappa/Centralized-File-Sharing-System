#include <sstream>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <fcntl.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <iostream>
#include <string>
#include <sys/stat.h>
#include <pthread.h>

#include "sqlite3.h"
#include "share.h"
#include "handleRequest.h"
extern pthread_mutex_t mymutex;
using namespace std;

//static int callback(void *data, int argc, char **argv, char **azColName);
void share(int sockfd, char* buffer)
{
	int i,file_fd,n4;
	string user,fileID;
	char* pch;
	static char file_name;

/*      Get User name from http request */
	pch = strstr(buffer,"usrid");
	for(i=6;i<20;i++ )
	{

		if(pch[i] == '&')
			break;
			user = user + pch[i];
	}

/*      Get Password from http request */
	pch = strstr(buffer,"test");
	for(i=5;i<20;i++ )
	{
		if(pch[i] == '\0')
			break;
			fileID = fileID + pch[i];
	}
	
	cout<<user<<endl;
	cout<<fileID<<endl;
	const char *usr=user.c_str();
	const char *fileid=fileID.c_str();
	sqlite3 *db;
	char *zErrMsg = 0;
	int rc;
	string sql;
	const char* data = "Callback function called";
	rc = sqlite3_open("207DB.db", &db);
	
	if( rc )
	{
	   fprintf(stderr, "Can't open database: %s\n", sqlite3_errmsg(db));
	   exit(0);
	}else
	{

	   fprintf(stderr, "Opened database successfully\n");
	}
	//sqlite3_close(db);


        char sqlfile[128] = {0};
	n4=snprintf(sqlfile, 256, "INSERT  into share (fileID,UserID) values ('%s','%s')",fileid,usr);
	if(n4<0)
	{printf("error\n");}
	printf("%s\n",sqlfile);
	sqlite3_stmt *count1 = NULL;
	pthread_mutex_lock(&mymutex);
	int n2 = sqlite3_prepare(db,sqlfile, 256, &count1, NULL);
	//For loop for the file not to be shared.
	
		int n1=sqlite3_step(count1);
	pthread_mutex_unlock(&mymutex);
		if( n1 <0 )
		{
      			fprintf(stderr, "SQL error1: %s\n", zErrMsg);
      			sqlite3_free(zErrMsg);
			exit(0);
		}
		else
		{
      			fprintf(stdout, "executed stat1 successfully\n");
   		}
	
//rc = sqlite3_finialize(count1);

rc = sqlite3_close(db);


       strcpy(&file_name, "Login.html");

        if((file_fd = open("Login.html",O_RDONLY)) < 0)
                {
            printf("error opening the file\n");
                fflush(stdout);
                pthread_exit(NULL);
                }
        else
                {

                long i, ret, len;
                const char * fstr = "text/html";
                //static char buffer[BUFSIZE+1],temp_buffer[BUFSIZE+1]; /* static so zero filled */
                struct stat stat_buf;

                len = (long)lseek(file_fd, (off_t)0, SEEK_END);
                 (void)lseek(file_fd, (off_t)0, SEEK_SET);
                bzero(buffer,sizeof(buffer));
                      (void)sprintf(buffer,"HTTP/1.1 200 OK\nServer: 207httpd/%d.0\nContent-Length: %ld\nConnection: close\nContent-Type: %s\n\n", VERSION,len, fstr);

                (void)write(sockfd,buffer,strlen(buffer));

                while (    (ret = read(file_fd, buffer, BUFSIZE)) > 0 ) {
                (void)write(sockfd,buffer,ret);

                }
                sleep(1);
                close(sockfd);
}

}



